// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trustmesh/SynchronizationFeedback.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SynchronizationFeedback struct {
	Creator                                    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                                         uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Approved                                   string `protobuf:"bytes,3,opt,name=Approved,proto3" json:"Approved,omitempty"`
	BusinessObject                             string `protobuf:"bytes,4,opt,name=BusinessObject,proto3" json:"BusinessObject,omitempty"`
	BaseledgerBusinessObjectIDOfApprovedObject string `protobuf:"bytes,5,opt,name=BaseledgerBusinessObjectIDOfApprovedObject,proto3" json:"BaseledgerBusinessObjectIDOfApprovedObject,omitempty"`
	Workgroup                                  string `protobuf:"bytes,6,opt,name=Workgroup,proto3" json:"Workgroup,omitempty"`
	Recipient                                  string `protobuf:"bytes,7,opt,name=Recipient,proto3" json:"Recipient,omitempty"`
	HashOfObjectToApprove                      string `protobuf:"bytes,8,opt,name=HashOfObjectToApprove,proto3" json:"HashOfObjectToApprove,omitempty"`
	OriginalBaseledgerTransactionID            string `protobuf:"bytes,9,opt,name=OriginalBaseledgerTransactionID,proto3" json:"OriginalBaseledgerTransactionID,omitempty"`
	OriginalOffchainProcessMessageID           string `protobuf:"bytes,10,opt,name=OriginalOffchainProcessMessageID,proto3" json:"OriginalOffchainProcessMessageID,omitempty"`
	FeedbackMessage                            string `protobuf:"bytes,11,opt,name=FeedbackMessage,proto3" json:"FeedbackMessage,omitempty"`
}

func (m *SynchronizationFeedback) Reset()         { *m = SynchronizationFeedback{} }
func (m *SynchronizationFeedback) String() string { return proto.CompactTextString(m) }
func (*SynchronizationFeedback) ProtoMessage()    {}
func (*SynchronizationFeedback) Descriptor() ([]byte, []int) {
	return fileDescriptor_8799b614cda4802d, []int{0}
}
func (m *SynchronizationFeedback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SynchronizationFeedback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SynchronizationFeedback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SynchronizationFeedback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SynchronizationFeedback.Merge(m, src)
}
func (m *SynchronizationFeedback) XXX_Size() int {
	return m.Size()
}
func (m *SynchronizationFeedback) XXX_DiscardUnknown() {
	xxx_messageInfo_SynchronizationFeedback.DiscardUnknown(m)
}

var xxx_messageInfo_SynchronizationFeedback proto.InternalMessageInfo

func (m *SynchronizationFeedback) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *SynchronizationFeedback) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SynchronizationFeedback) GetApproved() string {
	if m != nil {
		return m.Approved
	}
	return ""
}

func (m *SynchronizationFeedback) GetBusinessObject() string {
	if m != nil {
		return m.BusinessObject
	}
	return ""
}

func (m *SynchronizationFeedback) GetBaseledgerBusinessObjectIDOfApprovedObject() string {
	if m != nil {
		return m.BaseledgerBusinessObjectIDOfApprovedObject
	}
	return ""
}

func (m *SynchronizationFeedback) GetWorkgroup() string {
	if m != nil {
		return m.Workgroup
	}
	return ""
}

func (m *SynchronizationFeedback) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *SynchronizationFeedback) GetHashOfObjectToApprove() string {
	if m != nil {
		return m.HashOfObjectToApprove
	}
	return ""
}

func (m *SynchronizationFeedback) GetOriginalBaseledgerTransactionID() string {
	if m != nil {
		return m.OriginalBaseledgerTransactionID
	}
	return ""
}

func (m *SynchronizationFeedback) GetOriginalOffchainProcessMessageID() string {
	if m != nil {
		return m.OriginalOffchainProcessMessageID
	}
	return ""
}

func (m *SynchronizationFeedback) GetFeedbackMessage() string {
	if m != nil {
		return m.FeedbackMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*SynchronizationFeedback)(nil), "example.baseledger.trustmesh.SynchronizationFeedback")
}

func init() {
	proto.RegisterFile("trustmesh/SynchronizationFeedback.proto", fileDescriptor_8799b614cda4802d)
}

var fileDescriptor_8799b614cda4802d = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x0b, 0xd3, 0x30,
	0x1c, 0xc6, 0xd7, 0x39, 0xf7, 0x12, 0x61, 0x42, 0x50, 0x0c, 0x63, 0xd4, 0xe1, 0x41, 0x87, 0x87,
	0xf6, 0xa0, 0x5f, 0xc0, 0x31, 0x64, 0x15, 0xa4, 0x32, 0x07, 0x82, 0x07, 0x21, 0x4d, 0xff, 0x6d,
	0xe3, 0xb6, 0xa4, 0x24, 0xa9, 0x6c, 0x7e, 0x0a, 0xaf, 0x7e, 0x23, 0x8f, 0x3b, 0x7a, 0x94, 0xed,
	0x8b, 0xc8, 0xb2, 0xbe, 0xe0, 0x50, 0x86, 0xb7, 0xe6, 0x79, 0xf9, 0x11, 0x9a, 0x07, 0x3d, 0x33,
	0xaa, 0xd0, 0x66, 0x0b, 0x3a, 0xf3, 0xdf, 0xef, 0x05, 0xcb, 0x94, 0x14, 0xfc, 0x2b, 0x35, 0x5c,
	0x8a, 0xd7, 0x00, 0x71, 0x44, 0xd9, 0xda, 0xcb, 0x95, 0x34, 0x12, 0x8f, 0x61, 0x47, 0xb7, 0xf9,
	0x06, 0xbc, 0x88, 0x6a, 0xd8, 0x40, 0x9c, 0x82, 0xf2, 0xea, 0xee, 0xe8, 0x41, 0x2a, 0x53, 0x69,
	0x83, 0xfe, 0xf9, 0xeb, 0xd2, 0x79, 0xf2, 0xbd, 0x83, 0x1e, 0xfd, 0x83, 0x8a, 0x09, 0xea, 0x31,
	0x05, 0xd4, 0x48, 0x45, 0x9c, 0x89, 0x33, 0x1d, 0x2c, 0xab, 0x23, 0x1e, 0xa2, 0x36, 0x8f, 0x49,
	0x7b, 0xe2, 0x4c, 0x3b, 0xcb, 0x36, 0x8f, 0xf1, 0x08, 0xf5, 0x5f, 0xe5, 0xb9, 0x92, 0x5f, 0x20,
	0x26, 0x77, 0x6c, 0xb4, 0x3e, 0xe3, 0xa7, 0x68, 0x38, 0x2b, 0x34, 0x17, 0xa0, 0x75, 0x18, 0x7d,
	0x06, 0x66, 0x48, 0xc7, 0x26, 0xae, 0x54, 0xfc, 0x09, 0x3d, 0x9f, 0xd5, 0xf7, 0xfe, 0xd3, 0x0b,
	0xe6, 0x61, 0x52, 0xf1, 0x4a, 0xc6, 0x5d, 0xcb, 0xf8, 0x8f, 0x06, 0x1e, 0xa3, 0xc1, 0x07, 0xa9,
	0xd6, 0xa9, 0x92, 0x45, 0x4e, 0xba, 0xb6, 0xde, 0x08, 0x67, 0x77, 0x09, 0x8c, 0xe7, 0x1c, 0x84,
	0x21, 0xbd, 0x8b, 0x5b, 0x0b, 0xf8, 0x25, 0x7a, 0xb8, 0xa0, 0x3a, 0x0b, 0x93, 0x0b, 0x6b, 0x25,
	0x4b, 0x36, 0xe9, 0xdb, 0xe4, 0xdf, 0x4d, 0xbc, 0x40, 0x8f, 0x43, 0xc5, 0x53, 0x2e, 0xe8, 0xa6,
	0xb9, 0xe7, 0x4a, 0x51, 0xa1, 0x29, 0x3b, 0xff, 0xe8, 0x60, 0x4e, 0x06, 0xb6, 0x7f, 0x2b, 0x86,
	0xdf, 0xa0, 0x49, 0x15, 0x09, 0x93, 0x84, 0x65, 0x94, 0x8b, 0x77, 0x4a, 0x32, 0xd0, 0xfa, 0x2d,
	0x68, 0x4d, 0x53, 0x08, 0xe6, 0x04, 0x59, 0xd4, 0xcd, 0x1c, 0x9e, 0xa2, 0xfb, 0xd5, 0x0b, 0x97,
	0x22, 0xb9, 0x67, 0xab, 0xd7, 0xf2, 0x2c, 0xf8, 0x71, 0x74, 0x9d, 0xc3, 0xd1, 0x75, 0x7e, 0x1d,
	0x5d, 0xe7, 0xdb, 0xc9, 0x6d, 0x1d, 0x4e, 0x6e, 0xeb, 0xe7, 0xc9, 0x6d, 0x7d, 0xf4, 0x53, 0x6e,
	0xb2, 0x22, 0xf2, 0x98, 0xdc, 0xfa, 0xe5, 0xe8, 0xfc, 0x66, 0x74, 0xfe, 0xce, 0x6f, 0x26, 0x6b,
	0xf6, 0x39, 0xe8, 0xa8, 0x6b, 0xd7, 0xf6, 0xe2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x29,
	0xc0, 0xaa, 0xcc, 0x02, 0x00, 0x00,
}

func (m *SynchronizationFeedback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SynchronizationFeedback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SynchronizationFeedback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedbackMessage) > 0 {
		i -= len(m.FeedbackMessage)
		copy(dAtA[i:], m.FeedbackMessage)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.FeedbackMessage)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.OriginalOffchainProcessMessageID) > 0 {
		i -= len(m.OriginalOffchainProcessMessageID)
		copy(dAtA[i:], m.OriginalOffchainProcessMessageID)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.OriginalOffchainProcessMessageID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OriginalBaseledgerTransactionID) > 0 {
		i -= len(m.OriginalBaseledgerTransactionID)
		copy(dAtA[i:], m.OriginalBaseledgerTransactionID)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.OriginalBaseledgerTransactionID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.HashOfObjectToApprove) > 0 {
		i -= len(m.HashOfObjectToApprove)
		copy(dAtA[i:], m.HashOfObjectToApprove)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.HashOfObjectToApprove)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Workgroup) > 0 {
		i -= len(m.Workgroup)
		copy(dAtA[i:], m.Workgroup)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.Workgroup)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BaseledgerBusinessObjectIDOfApprovedObject) > 0 {
		i -= len(m.BaseledgerBusinessObjectIDOfApprovedObject)
		copy(dAtA[i:], m.BaseledgerBusinessObjectIDOfApprovedObject)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.BaseledgerBusinessObjectIDOfApprovedObject)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BusinessObject) > 0 {
		i -= len(m.BusinessObject)
		copy(dAtA[i:], m.BusinessObject)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.BusinessObject)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Approved) > 0 {
		i -= len(m.Approved)
		copy(dAtA[i:], m.Approved)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.Approved)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSynchronizationFeedback(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSynchronizationFeedback(dAtA []byte, offset int, v uint64) int {
	offset -= sovSynchronizationFeedback(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SynchronizationFeedback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSynchronizationFeedback(uint64(m.Id))
	}
	l = len(m.Approved)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	l = len(m.BusinessObject)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	l = len(m.BaseledgerBusinessObjectIDOfApprovedObject)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	l = len(m.Workgroup)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	l = len(m.HashOfObjectToApprove)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	l = len(m.OriginalBaseledgerTransactionID)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	l = len(m.OriginalOffchainProcessMessageID)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	l = len(m.FeedbackMessage)
	if l > 0 {
		n += 1 + l + sovSynchronizationFeedback(uint64(l))
	}
	return n
}

func sovSynchronizationFeedback(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSynchronizationFeedback(x uint64) (n int) {
	return sovSynchronizationFeedback(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SynchronizationFeedback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSynchronizationFeedback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SynchronizationFeedback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SynchronizationFeedback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessObject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessObject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseledgerBusinessObjectIDOfApprovedObject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseledgerBusinessObjectIDOfApprovedObject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashOfObjectToApprove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashOfObjectToApprove = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalBaseledgerTransactionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalBaseledgerTransactionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalOffchainProcessMessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalOffchainProcessMessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedbackMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedbackMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSynchronizationFeedback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSynchronizationFeedback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSynchronizationFeedback(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSynchronizationFeedback
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSynchronizationFeedback
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSynchronizationFeedback
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSynchronizationFeedback
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSynchronizationFeedback
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSynchronizationFeedback        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSynchronizationFeedback          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSynchronizationFeedback = fmt.Errorf("proto: unexpected end of group")
)
