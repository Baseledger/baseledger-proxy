{
    "swagger": "2.0",
    "info": {
        "title": "Baseledger Proxy API documentation",
        "contact": {},
        "version": "1.0.0"
    },
    "host": "localhost:8081",
    "paths": {
        "/dev/auth": {
            "post": {
                "description": "login user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Dev"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.userDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dev/tx": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "generate transaction with custom payload",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Dev"
                ],
                "summary": "Generate transaction with custom payload",
                "parameters": [
                    {
                        "description": "Transaction payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createTxDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/dev/users": {
            "post": {
                "description": "register user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Dev"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.userDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/feedback": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new feedback",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Feedbacks"
                ],
                "summary": "Create new feedback based on parameters",
                "parameters": [
                    {
                        "description": "Feedback Request",
                        "name": "feedback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createSynchronizationFeedbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/organization": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get all organizations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get all organizations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.orgDetailsDto"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new organization",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create new organization based on parameters",
                "parameters": [
                    {
                        "description": "Organization Request",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createOrgRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/organization/{id}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Delete organization",
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sorwebhook": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get sor webhooks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SOR Webhooks"
                ],
                "summary": "Get sor webhooks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.workgroupMemberDetailsDto"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new SOR webhook",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "SOR Webhook"
                ],
                "summary": "Create new SOR webhook based on parameters",
                "parameters": [
                    {
                        "description": "Suggestion Request",
                        "name": "sorWebhook",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createSuggestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sorwebhook/{id}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Delete sorWebhook member",
                "tags": [
                    "SorWebhook Members"
                ],
                "summary": "Delete sorWebhook member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/suggestion": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new suggestion",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Suggestions"
                ],
                "summary": "Create new suggestion based on parameters",
                "parameters": [
                    {
                        "description": "Suggestion Request",
                        "name": "suggestion",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createSuggestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sunburst/{txId}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get data for sunburst chart",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sunbursts"
                ],
                "summary": "Get data for sunburst chart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "txId",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.syncTreeSunburst"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/trustmeshes": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get all trustmeshes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trustmeshes"
                ],
                "summary": "Get all trustmeshes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.trustmeshDto"
                            }
                        }
                    }
                }
            }
        },
        "/trustmeshes/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get single trustmesh",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trustmesh"
                ],
                "summary": "Get single trustmesh",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.trustmeshDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workflow/latestState/{bo_id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get latest trustmesh entry for a specific baseledger_business_object_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflow"
                ],
                "summary": "Get latest trustmesh entry for a specific baseledger_business_object_id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "bo_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.latestTrustmeshEntryDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workflow/new": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get trustmesh entries where suggestion received is the latest state",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflow"
                ],
                "summary": "Get trustmesh entries where suggestion received is the latest state",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.newWorkflowDto"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workgroup": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get all workgroups",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workgroups"
                ],
                "summary": "Get all workgroups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.workgroupDetailsDto"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new workgroup",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Workgroups"
                ],
                "summary": "Create new workgroup based on parameters",
                "parameters": [
                    {
                        "description": "Workgroup Request",
                        "name": "workgroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createWorkgroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workgroup/{id}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Delete workgroup",
                "tags": [
                    "Workgroups"
                ],
                "summary": "Delete workgroup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workgroup/{id}/participation": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get workgroup members",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workgroup Members"
                ],
                "summary": "Get workgroup members",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.workgroupMemberDetailsDto"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new workgroup member",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Workgroup Members"
                ],
                "summary": "Create new workgroup member based on parameters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "description": "Workgroup Member Request",
                        "name": "workgroupMember",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createWorkgroupMemberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workgroup/{id}/participation/{participationId}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Delete workgroup member",
                "tags": [
                    "Workgroup Members"
                ],
                "summary": "Delete workgroup member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "participationId",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.createOrgRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "handler.createSuggestionRequest": {
            "type": "object",
            "properties": {
                "baseledger_business_object_id": {
                    "type": "string"
                },
                "business_object_json": {
                    "type": "string"
                },
                "business_object_type": {
                    "type": "string"
                },
                "knowledge_limiters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient": {
                    "type": "string"
                },
                "referenced_baseledger_business_object_id": {
                    "type": "string"
                },
                "referenced_baseledger_transaction_id": {
                    "type": "string"
                },
                "sor_message_id": {
                    "type": "string"
                },
                "workgroup_id": {
                    "type": "string"
                },
                "workstep_type": {
                    "type": "string"
                }
            }
        },
        "handler.createSynchronizationFeedbackRequest": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "baseledger_business_object_id_of_approved_object": {
                    "type": "string"
                },
                "business_object_type": {
                    "type": "string"
                },
                "feedback_message": {
                    "type": "string"
                },
                "original_baseledger_transaction_id": {
                    "type": "string"
                },
                "original_offchain_process_message_id": {
                    "type": "string"
                },
                "recipient": {
                    "type": "string"
                },
                "referenced_workstep_type": {
                    "type": "string"
                },
                "workgroup_id": {
                    "type": "string"
                }
            }
        },
        "handler.createTxDto": {
            "type": "object",
            "properties": {
                "op_code": {
                    "type": "integer"
                },
                "payload": {
                    "type": "string"
                }
            }
        },
        "handler.createWorkgroupMemberRequest": {
            "type": "object",
            "properties": {
                "organization_endpoint": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "organization_token": {
                    "type": "string"
                }
            }
        },
        "handler.createWorkgroupRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "privatize_key": {
                    "type": "string"
                }
            }
        },
        "handler.latestTrustmeshEntryDto": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "baseledger_business_object_id": {
                    "type": "string"
                },
                "business_object_json_payload": {
                    "type": "string"
                },
                "workflow_id": {
                    "description": "Id of the trustmesh",
                    "type": "string"
                },
                "workstep_id": {
                    "description": "Id of the latest trustmesh entry id",
                    "type": "string"
                },
                "workstep_type": {
                    "type": "string"
                }
            }
        },
        "handler.newWorkflowDto": {
            "type": "object",
            "properties": {
                "baseledger_business_object_id": {
                    "type": "string"
                },
                "business_object_json_payload": {
                    "type": "string"
                },
                "workflow_id": {
                    "description": "Id of the trustmesh",
                    "type": "string"
                },
                "workstep_id": {
                    "description": "Id of the latest trustmesh entry id",
                    "type": "string"
                },
                "workstep_type": {
                    "type": "string"
                }
            }
        },
        "handler.orgDetailsDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handler.sunburstItem": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.sunburstItem"
                    }
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "handler.syncTreeSunburst": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.sunburstItem"
                    }
                },
                "levels": {
                    "type": "number"
                }
            }
        },
        "handler.trustmeshDto": {
            "type": "object",
            "properties": {
                "businessObjectTypes": {
                    "type": "string"
                },
                "containsRejections": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.trustmeshEntryDto"
                    }
                },
                "finalized": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "participants": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "handler.trustmeshEntryDto": {
            "type": "object",
            "properties": {
                "baseledgerBusinessObjectId": {
                    "type": "string"
                },
                "baseledgerTransactionId": {
                    "type": "string"
                },
                "baseledgerTransactionType": {
                    "type": "string"
                },
                "businessObjectType": {
                    "type": "string"
                },
                "commitmentState": {
                    "type": "string"
                },
                "entryType": {
                    "type": "string"
                },
                "offchainProcessMessageId": {
                    "type": "string"
                },
                "receiverOrgId": {
                    "type": "string"
                },
                "receiverOrgName": {
                    "type": "string"
                },
                "referencedBaseledgerBusinessObjectId": {
                    "type": "string"
                },
                "referencedBaseledgerTransactionId": {
                    "type": "string"
                },
                "referencedProcessMessageId": {
                    "type": "string"
                },
                "senderOrgId": {
                    "type": "string"
                },
                "senderOrgName": {
                    "type": "string"
                },
                "tendermintBlockId": {
                    "type": "string"
                },
                "tendermintTransactionId": {
                    "type": "string"
                },
                "tendermintTransactionTimestamp": {
                    "type": "string"
                },
                "transactionHash": {
                    "type": "string"
                },
                "trustmeshId": {
                    "type": "string"
                },
                "workgroupId": {
                    "type": "string"
                },
                "workgroupName": {
                    "type": "string"
                },
                "workstepType": {
                    "type": "string"
                }
            }
        },
        "handler.userDto": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handler.workgroupDetailsDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handler.workgroupMemberDetailsDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization_endpoint": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "organization_token": {
                    "type": "string"
                },
                "workgroup_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}