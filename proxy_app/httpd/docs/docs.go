// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/feedback": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new feedback",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Feedbacks"
                ],
                "summary": "Create new feedback based on parameters",
                "parameters": [
                    {
                        "description": "Feedback Request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createSynchronizationFeedbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/organization": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get all organizations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get all organizations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.orgDetailsDto"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new organization",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create new organization based on parameters",
                "parameters": [
                    {
                        "description": "Organization Request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createOrgRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/organization/{id}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Delete organization",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/suggestion": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create new suggestion",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Suggestions"
                ],
                "summary": "Create new suggestion based on parameters",
                "parameters": [
                    {
                        "description": "Suggestion Request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createSuggestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sunburst/{txId}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get data for sunburst chart",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sunbursts"
                ],
                "summary": "Get data for sunburst chart",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "txId",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.syncTreeSunburst"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/trustmeshes": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get all trustmeshes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trustmeshes"
                ],
                "summary": "Get all trustmeshes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handler.trustmeshDto"
                            }
                        }
                    }
                }
            }
        },
        "/trustmeshes/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "get single trustmesh",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trustmesh"
                ],
                "summary": "Get single trustmesh",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.trustmeshDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.createOrgRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "handler.createSuggestionRequest": {
            "type": "object",
            "properties": {
                "baseledger_business_object_id": {
                    "type": "string"
                },
                "business_object_json": {
                    "type": "string"
                },
                "business_object_type": {
                    "type": "string"
                },
                "knowledge_limiters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipient": {
                    "type": "string"
                },
                "referenced_baseledger_business_object_id": {
                    "type": "string"
                },
                "referenced_baseledger_transaction_id": {
                    "type": "string"
                },
                "sor_message_id": {
                    "type": "string"
                },
                "workgroup_id": {
                    "type": "string"
                },
                "workstep_type": {
                    "type": "string"
                }
            }
        },
        "handler.createSynchronizationFeedbackRequest": {
            "type": "object",
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "baseledger_business_object_id_of_approved_object": {
                    "type": "string"
                },
                "business_object_type": {
                    "type": "string"
                },
                "feedback_message": {
                    "type": "string"
                },
                "original_baseledger_transaction_id": {
                    "type": "string"
                },
                "original_offchain_process_message_id": {
                    "type": "string"
                },
                "recipient": {
                    "type": "string"
                },
                "workgroup_id": {
                    "type": "string"
                }
            }
        },
        "handler.orgDetailsDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handler.sunburstItem": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.sunburstItem"
                    }
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "handler.syncTreeSunburst": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.sunburstItem"
                    }
                },
                "levels": {
                    "type": "number"
                }
            }
        },
        "handler.trustmeshDto": {
            "type": "object",
            "properties": {
                "businessObjectTypes": {
                    "type": "string"
                },
                "containsRejections": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.trustmeshEntryDto"
                    }
                },
                "finalized": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "participants": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                }
            }
        },
        "handler.trustmeshEntryDto": {
            "type": "object",
            "properties": {
                "baseledgerBusinessObjectId": {
                    "type": "string"
                },
                "baseledgerTransactionId": {
                    "type": "string"
                },
                "baseledgerTransactionType": {
                    "type": "string"
                },
                "businessObjectType": {
                    "type": "string"
                },
                "commitmentState": {
                    "type": "string"
                },
                "entryType": {
                    "type": "string"
                },
                "offchainProcessMessageId": {
                    "type": "string"
                },
                "receiverOrgId": {
                    "type": "string"
                },
                "receiverOrgName": {
                    "type": "string"
                },
                "referencedBaseledgerBusinessObjectId": {
                    "type": "string"
                },
                "referencedBaseledgerTransactionId": {
                    "type": "string"
                },
                "referencedProcessMessageId": {
                    "type": "string"
                },
                "senderOrgId": {
                    "type": "string"
                },
                "senderOrgName": {
                    "type": "string"
                },
                "tendermintBlockId": {
                    "type": "string"
                },
                "tendermintTransactionId": {
                    "type": "string"
                },
                "tendermintTransactionTimestamp": {
                    "type": "string"
                },
                "transactionHash": {
                    "type": "string"
                },
                "trustmeshId": {
                    "type": "string"
                },
                "workgroupId": {
                    "type": "string"
                },
                "workgroupName": {
                    "type": "string"
                },
                "workstepType": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "localhost:8081",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Baseledger Proxy API documentation",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
